Alias {
    \init {
    inputs:
        (\what)
    }
}

Node {
doc:
    "Root element, grandfather of everything."
body:
    \origin {
        \set { inputs: (value) }
    test:
        n1 := Node()
        n2 := Node()
        ?: n2 origin == Node
        n2 origin = n1
        ?: n2 origin == n1
    }

    \parent {
    }

    \extensions {
    test:
        // Adding...
        N := Node()
        ?: N extensions empty?
        E1 := Node()
        N extensions << E1
        ?: N extensions size == 1
        ?: N extensions[0] == E1
        !: DuplicateException throw? { N extensions[0] = E1 }
        ?: DuplicateException throw? { N extensions << E1 }
        E2 := Node()
        N extensions << E2
        ?: N extensions size == 2
        ?: N extensions[1] == E2
        ?: DuplicateException throw? { N extensions << E2 }
        ?: DuplicateException throw? { N extensions[1] = E1 }

        // Querying...
        ?: N extensions[:E1]
        ?: N extensions[:E2]
        E3 := Node()
        ?: NotFoundException throw? { N extensions[:E3] }
        !: N extensions[:E3]?
        N extensions << E3
        !: NotFoundException throw? { N extensions[:E3] }
        ?: N extensions[:E3]?

        // Removing...
        E4 := Node()
        ?: NotFoundException throw? { N extensions[:E4] >> }
        N extensions[:E3] >>
        ?: N extensions size == 2
        !: N extensions[:E3]?
        N extensions[:E2] >>
        ?: N extensions size == 1
        !: N extensions[:E2]?
        N extensions[:E1] >>
        ?: N extensions empty?
        !: N extensions[:E1]?
    }

    \is? {
    inputs:
        (\ancestor)
    test:
        ?: Node is?(Node)
        ?: Node() is?(Node)
        !: Node() is?(Node())
        !: Node is?(Node())
        ?: "Hello" is?(Object Text)
        !: "Hello" is?(Object Number)
        ?: 123 is?(Object Number)
        !: 123 is?(Object Text)
        N1 := Node()
        ?: N1 is?(N1) && N1 is?(Node)
        N2 := N1()
        ?: N2 is?(N2) && N2 is?(N1) && N2 is?(Node)
        N3 := N2()
        ?: N3 is?(N3) && N3 is?(N2) && N3 is?(N1) && N3 is?(Node)
    }

    \has? {
    inputs:
        (\child)
    test:
        ?: Node has?(Node)
        !: Node has?(__CrazyNode__)
        ?: Node has?(fork)
        !: Node has?(__crazy_method__)
        ?: Object has?(Text)
        ?: Object Text has?(fork)
        n := Node()
        n a := Node()
        ?: n has?(a)
        ?: n a has?(n)
        n b := Node()
        ?: n has?(b)
        ?: n a has?(b)
        ?: n b has?(a)
        n2 := n()
        ?: n2 has?(a)
        ?: n2 has?(b)
        ?: n2 a has?(b)
        ?: n2 b has?(a)
    }

    \defined? {
    test:
        !: Node defined?
        !: Node() defined?
        n := Node()
        !: n defined?
        n i := Number()
        !: n defined?
//        n i value := 1
//        ?: n defined?
    }

    \virtual? {
    }

    \real? {
    }

    \copy {
    }

    \fork {
    doc:
        "Fork the receiver."
    inputs:
        (\args: 0) // TODO
    test:
        n := Node()
        f := n fork
        ?: f origin = n
    }

    \`:=` {
    inputs:
        (\target, \value)
    }

    \`=` {
    inputs:
        (\target, \value)
    }

    \`>>` {
    inputs:
        (\child)
    }

    \`==` {
    inputs:
        (\value)
    }

    \`!=` {
    inputs:
        (\value)
    }

    \`||` {
    inputs:
        (\value)
    }

    \`&&` {
    inputs:
        (\value)
    }

    \`!` {
    }

    \`||=` {
    inputs:
        (\target, \value)
    }

    \`&&=` {
    inputs:
        (\target, \value)
    }

    \throw {
    }

    \`?:` {
    }

    \`!:` {
    }

    \inspect {
    }

    \dump {
    }

    \memory_address {
    }

    write := {
        Console write(parent)
    }

    print := {
        Console print(parent)
    }

    alert := {
        Console alert(parent)
    }

    read := Alias(Console read)
test:
    ?: origin == self
    ?: parent == self

    // child creation
    world := Node()
    !: world has?(country1)
    ?: NotFoundException throw? { world country1 = "France" }
    world country1 := "France"
    ?: world country1?
    ?: world country1 == "France"
    world country1 := "Spain"
    ?: world country1 == "Spain"
    world country1 = "UK"
    ?: world country1 == "UK"
    world country2 := "USA"
    ?: world country2 == "USA"
    new_world := world()
    ?: new_world country1 == "UK"
    new_world country1 = "England"
    ?: new_world country1 == "England"
    ?: world country1 == "UK"
}
