---------------

Meta-slots :

Person = Object clone {
    name = ""
    name.output_filter = method(val) { val uppercased }
    name.spy { "name changed" println }
}

p = Person clone
p name.output_filter = nil
p name.spy { "Yo" println }

name.spy { ... } -> spy("name", { ... })
spy = method(slot, block)

copy.enabled = true -> enabled.setter("copy", true)
enabled.setter = method(slot, block) { ... } -> setter("enabled", method(...))
setter = method(slot, val)

---------------------------------------------------

Calculator do {
    sum = { |a, b -> r| r = a + b }
}

---------------------------------------------------

* Multi-value
* Closure everywhere
* Action/Property
* TextField = Property
* Button = Action

app(name: "Hello World!") {
    window(width: 100, height: 200) {
    first_name = property
    last_name = property
    field {
    first_name = "Manu"
    companies each(#(comp, comp printl))
    }
    button {
    click = { close }
    }
    }
}

add = { |x, y| x + y }

authors each { |auth| auth println }

Author = [
    protos = Object
    first = nil
    last = nil
]

a = [ protos << Author, first = "Manu" ]


Author = {

}

Les identifiants débutant par une majuscule sont "activables" par défaut !

Button = Object {
    title = ""
    show = { ... }
}

b = Button { title = "OK" }

Handlers :

    * Par défaut, un message ou un bloc envoyé à un receiver est exécuté sur ce receiver. Un message retourne le résultat de la méthode associée alors qu'un bloc retourne le receiver.
    * L'handler est customizable, pour faire à peu près tout ce qu'on veut avec le message ou le bloc reçu. C'est ainsi que sont implémentés les méthodes each, select, inject, etc.


Résultat des méthodes :

    * meth = |x, y -> r| {
        if x > 1 { "Hello".println }
        r = 5
    }
    *	swap = |x, y -> y, x|
    * square = |x -> x^2|
    * si le résultat n'est pas précisé, c'est le receiver qui est retourné.

authors.each |auth| { if auth == "Manu" { exit } }

authors.select |auth -> selected| { selected = auth.human? }

???????????????

v kind_of?(Button)

b = Button { name = "OK" }

Quand on exécute une méthode :

    * Créer un clone du receiver
    * Exécuter les paramètres dans ce contexte
    * Exécuter le corp de la méthode

Author first = "Manu"

Button = View clone {
    traits << Watchable
    name = nil
    size = nil
    show = { view show }
    hide = { view hide }
}

View = Object clone {
    Button = clone {}
}

Window(width: 50, height: 100) {
    Button(name: "OK")
}

-------------------------------

Object:
    * proto
    * modules
    * parent
    * slots

-------------------------------

each(<Number>limit = nil, <Proc>code -> result) = {

}

if(i > 1) {
    ...
} else {
    ...
}

-------------------------------

Person full_name = { [first, last] join }
Person capitalize! = { first capitalize!; last capitalize! }
Person kill!(date = Date.today) = {
    dead? = true
    date_of_death = date
}

Person {
    first = ""
}

p = Person clone
p first = "Manu"

Une méthode a pour prototype "Method" et pour parent le receiver. Ainsi, un message inconnu est redirigé vers le receiver.

L'appel d'une methode "m" trouvée dans les prototypes d'un receiver "r" entraîne le clonage de "m" et le changement du parent pour le faire correspondre à "r".

L'appel d'une méthode "m" trouvée dans les parents d'un receiver "r" entraîne le clonage de "m" et le changement du parent dans le cas où la méthode a été trouvée dans un prototype d'un parent (le parent du clone de "m" devient alors le parent de "r" ayant un prototype répondant à la méthode).

Le prototype "Method" contient une seule méthode nommée "this" qui renvoie le clone de la méthode en cours d'exécution. Un "Reflector" peut alors être utilisé pour avoir un contrôle total sur ce clone.

Le prototype "Objet" contient une méthode "self" qui renvoie le receiver.

meth = {
    "hello" println
    a = 1
    // Le prototype de "c" est "Closure" et le parent est "this"
    c = { a * 2 }
    // L'appel de "c" entraîne son clonage et le parent est conservé
    c println
}

Closure avec paramètres :

c = { |a, b| a + b }

str = ""
authors each { str += its full_name }

full_name = {
    |first, last -> r|
    r = first
    if(last) {
    if(first) { r = r + " " }
    r = r + last
    }
}

full_name = method(first, last -> r) {
    r = first
    if(last) {
    if(first) { r = r + " " }
    r = r + last
    }
}

authors each { it println }

est équivalent à :

authors each(closure(it) { println })

---------------

Idée : un bloc de code envoyé à un objet non activable active ce dernier.

manu = Person { first = "Manu"; last = "Vila" }

... equivalent à :

manu = Person()

---------------

Plus clair ainsi :

company = "Kindalab"

manu = Person new {
    first = "Manu"
    last = "Vila"
    company = outer company
}

---------------

Meta-données :

O = Object clone {
    copy = method {}
}

o = O clone

o &copy enabled = true

o &copy watch { do_something }

---------------

app = application {
    win = window {
    button("Close") {
    spy(click) { close }
    }
    button("Quit") {
    spy(click) { quit }
    }
    }
}

---------------

Company: Object {
    name: String
    activity: String
    boss: Person
    employees: Person[]
    count = 0
}

Person: Object {
    first_name: String
    last_name: String
}

kl: Company {
    name = "Kindalab"
    activity = "Internet"
    boss first_name = "Manuel"
    boss last_name = "Vila"
}

comp: Company
comp name = "3base"

comp count++

---------------

Company = *Object {
    name = *String
    activity = *String
    boss = *Person
    employees = *Person[]
    count = 0
}

Person = *Object {
    first_name = *String
    last_name = *String
}

kl = *Company {
    name = "Kindalab"
    activity = "Internet"
    boss first_name = "Manuel"
    boss last_name = "Vila"
}

comp = *Company
comp boss first_name = "3base"

comp count++

---------------

Company = Object clone {
    name = ""
    activity = ""
    boss = Person clone
}

Person = Object clone {
    first_name = ""
    last_name = ""
    age = 0
}

comp = Company clone
comp.boss.age.watchers << { "age changed" print }
ben = Person clone { first_name = "Benoît", age = 37 }
comp boss = ben
ben age++

