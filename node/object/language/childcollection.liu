Object Language ChildCollection {
    // --- Iterable ---

    \iterator {
    test:
        obj := Object()
        col := Language ChildCollection(obj)
        iter := col iterator
        ?: IndexOutOfBoundsException throw? { iter read }
        ?: IndexOutOfBoundsException throw? { iter read! }
        !: iter read?

        pair := Pair(1, 2)
        pair a := "A"
        pair b := "B"
        col := Language ChildCollection(pair)
        iter := col iterator
        list := []
        list << iter read!
        list << iter read!
        list << iter read!
        list << iter read!
        ?: IndexOutOfBoundsException throw? { iter read! }
        ?: list contains?(1)
        ?: list contains?(2)
        ?: list contains?("A")
        ?: list contains?("B")
    }

    \size {
    test:
        obj := Object()
        col := Language ChildCollection(obj)
        ?: col size == 0
        obj a := 1
        ?: col size == 1

        pair := Pair(1, 2)
        col := Language ChildCollection(pair)
        ?: col size == 2
        pair a := "A"
        pair b := "B"
        ?: col size == 4
    }
test:
//    ?: origin == Object
//    ?: parent == Object

    ?: is?(Iterable)

    n1 := Node()
    c1 := Node()
    c2 := Node()
    n1 c3 := c1
    ?: n1 children contains?(c1)
    ?: n1 children[:c1] == c1
    !: n1 children contains?(c2)
    ?: NotFoundException throw? { n1 children[:c2] }
    n1 c3 >>
    !: n1 children contains?(c1)

// TODO:
//    a := 1
//    b := 2
//    c := 3
//    p := Pair(a, b)
//    ?: p children(with_unnamed?: yes) contains?(a)
//    ?: p children(with_unnamed?: yes) contains?(b)
//    !: p children(with_unnamed?: yes) contains?(c)
}
