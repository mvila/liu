Object Text {
    \fork {
    test:
        txt := "Hello"
        ?: txt origin == Text
        new_txt := txt fork
        ?: new_txt origin == txt
        ?: new_txt == "Hello"

        X := Node()
        X a := "a"
        Y := X()
        X a := "b"
        ?: Y a == "b"
        X a uppercase!
        ?: Y a == "B"
        X a := "c"
        ?: Y a == "B"
    }

    \copy {
    test:
        txt := "Hello"
        txt2 := txt copy
        ?: txt2 == "Hello"
        txt2 value = "Bye"
        ?: txt2 == "Bye"
        ?: txt == "Hello"
        txt3 := txt fork
        txt4 := txt3 copy
        ?: txt4 == "Hello"
        txt4 uppercase!
        ?: txt4 == "HELLO"
        ?: txt3 == "Hello"
        ?: txt == "Hello"
    }

    \`==` {
    inputs:
        (\what)
    test:
        ?: "" == ""
        !: "a" == ""
        ?: "a" != ""
        ?: "a" == "a"
        ?: "a" != "A"
        ?: "abc" == "abc"
    }

    \`<=>` {
    test:
        ?: ("" <=> "") == 0
        ?: ("abc" <=> "abc") == 0
        ?: "abc" >= "abc"
        ?: "abc" <= "abc"
        ?: ("a" <=> "b") == -1
        ?: "a" < "b"
        ?: ("b" <=> "a") == 1
        ?: "b" > "a"
        ?: ("abc" <=> "def") == -1
        ?: "abc" < "def"
    }

    // --- Iterable ---

    \iterator {
//    inputs:
//        (reverse: no)
    test:
        txt := "abc"
        iter := txt iterator
        ?: iter source === txt
        ?: iter read?
        ?: iter read == 'a'
        ?: iter read! == 'a'
        ?: iter read! == 'b'
        ?: iter read! == 'c'
        ?: IndexOutOfBoundsException throw? { iter read }
        ?: IndexOutOfBoundsException throw? { iter read! }
        !: iter read?
    }

    \contains? {
    test:
        txt := "This is a beautiful world!"
        ?: txt contains?("beautiful")
        !: txt contains?("wonderful")
    }

    \count {
    test:
        txt := "This is a beautiful world!"
        ?: txt count("beautiful") == 1
        ?: txt count("wonderful") == 0
        ?: txt count("i") == 3
    }

    \size {
    test:
        ?: Text size == 0
        ?: Text() size == 0
        ?: "" size == 0
        ?: "a" size == 1
        ?: "\r\n" size == 2
    }

    \empty? {
    test:
        ?: "" empty?
        !: "a" empty?
    }

    \first {
    test:
        ?: IndexOutOfBoundsException throw? { "" first }
        !: "" first?
        ?: "a" first? == "a"
        ?: "abc" first == "a"
    }

    \second {
    test:
        ?: IndexOutOfBoundsException throw? { "" second }
        !: "" second?
        ?: IndexOutOfBoundsException throw? { "a" second }
        !: "a" second?
        ?: "ab" second? == "b"
        ?: "abc" second == "b"
    }

    \third {
    test:
        ?: IndexOutOfBoundsException throw? { "" third }
        !: "" third?
        ?: IndexOutOfBoundsException throw? { "a" third }
        !: "a" third?
        ?: IndexOutOfBoundsException throw? { "ab" third }
        !: "ab" third?
        ?: "abc" third? == "c"
        ?: "abcd" third == "c"
    }

    \last {
    test:
        ?: IndexOutOfBoundsException throw? { "" last }
        !: "" last?
        ?: "abc" last? == "c"
        ?: "abcd" last == "d"
    }

    // --- Collection ---

    \`<<` {
    test:
        ?: "" << "" == ""
        ?: "a" << 'b' == "ab"
        txt := "abc"
        ?: txt << "def" == "abcdef"
    }

    \`[]>>` {
    test:
        txt := ""
        txt[:""] >>
        ?: txt == ""
        txt = "abc"
        ?: txt[:'b'] >> == 'b'
        ?: txt == "ac"
        ?: NotFoundException throw? { txt[:'b'] >> }
        !: txt[:'b']? >>
        ?: txt[:'c']? >>
        ?: txt == "a"
        ?: txt[:'a'] >> == 'a'
        ?: txt empty?

        txt = "ababa"
        txt[:"a"] >>
        ?: txt == "baba"
        ?: txt[:"ab"] >> == "ab"
        ?: txt == "ba"
    }

    \clear! {
    test:
        ?: "" clear! == ""
        ?: "a" clear! == ""
        ?: "abab" clear! == ""
        txt := "Hi there!"
        txt clear!
        ?: txt == ""
    }

    // --- Indexable ---

    \`[]` {
    test:
        txt := "Hello"
        ?: txt[0] == "H"
        ?: txt[1] == "e"
        ?: IndexOutOfBoundsException throw? { txt[5] }
        !: txt[5]?
        ?: txt[-1] == "o"
        ?: txt[-2] == "l"
        ?: IndexOutOfBoundsException throw? { txt[-6] }
//        ?: txt[0, 0] == ""
//        ?: txt[0, 3] == "Hel"
//        ?: txt[1, 3] == "ell"
//        ?: txt[0, -1] == "Hello"
//        ?: txt[0, -2] == "Hell"
//        ?: txt[0, -5] == "H"
//        ?: txt[0, -6] == ""
//        ?: IndexOutOfBoundsException throw? { txt[0, -7] }
//        ?: txt[-1, 1] == "o"
//        ?: txt[-1, -1] == "o"
    }

    \`[]=` {
    test:
        txt := "abcxef"
        txt[3] = 'd'
        ?: txt == "abcdef"
        txt[-1] = "F"
        ?: txt == "abcdeF"
        txt[3] = "123"
        ?: txt == "abc123eF"
        ?: IndexOutOfBoundsException throw? { txt[10] = 'x' }
        !: txt[10]? = 'x'
    }

    \`[]:=` {
    test:
        txt := "abcxef"
        txt[3] := 'd'
        ?: txt == "abcdef"
        txt[-1] := "F"
        ?: txt == "abcdeF"
        txt[3] := "123"
        ?: txt == "abc123eF"
        ?: IndexOutOfBoundsException throw? { txt[10] := 'x' }
        !: txt[10]? := 'x'
        txt := ""
        txt[0] := 'a'
        ?: txt == "a"
        txt[1] := 'b'
        ?: txt == "ab"
        txt[2] := "cdef"
        ?: txt == "abcdef"
    }

    \`[]>>` {
    test:
        txt := "abc"
        ?: txt[0] >> == 'a'
        ?: txt == "bc"
        ?: txt[1] >> == 'c'
        ?: txt == "b"
        ?: txt[-1] >> == 'b'
        ?: txt == ""
        ?: IndexOutOfBoundsException throw? { txt[0] >> }
        !: txt[0]? >>
    }

    \index_iterator {
    test:
        txt := "abc"
        iter := txt index_iterator
        ?: iter source === txt
        ?: iter read?
        ?: iter read == 0
        ?: iter read! == 0
        ?: iter read! == 1
        ?: iter read! == 2
        ?: IndexOutOfBoundsException throw? { iter read }
        ?: IndexOutOfBoundsException throw? { iter read! }
        !: iter read?
    }

    \index {
    test:
        ?: NotFoundException throw? { "" index("x") }
        !: "" index?("x")
        ?: NotFoundException throw? { "abc" index("x") }
        !: "abc" index?("x")
        ?: "xbc" index("x") == 0
        ?: "xbc" index('x') == 0
        ?: "axc" index('x') == 1
        ?: "abx" index('x') == 2
    }

    // --- Insertable ---

    \`[]<<` {
    test:
        txt := "abc"
        ?: IndexOutOfBoundsException throw? { txt[4] << "*" }
        !: txt[4]? << "*"
        txt[3] << "*"
        ?: txt == "abc*"
        txt[-2] << "*"
        ?: txt == "ab*c*"
        txt[1] << "*"
        ?: txt == "a*b*c*"
        txt[0] << "*"
        ?: txt == "*a*b*c*"
    }

    // --- Text ---

    \value {
    test:
        ?: Text() value == ""
        ?: "" value == ""
        ?: "Hello" value == "Hello"
        txt := "Hello"
        txt value = "Bye"
        ?: txt == "Bye"
        txt value uppercase!
        ?: txt value == "BYE"
        ?: txt == "BYE"

        X := Node()
        X a := "a"
        Y := X()
        ?: Y a == "a"
        X a value = "b"
        ?: Y a == "b"

        x := Text()
        y := x()
        x value = "Hi"
        ?: y == "Hi"

        !: Text value?
        !: Text() value?
        ?: "" value?
        ?: "hello" value?

        x := Text()
        !: x value?
        y := x()
        !: y value?
        x value = "Hi"
        ?: x value?
        ?: y value?
    }

    \`+` {
    test:
        ?: "" + "" == ""
        ?: "abc" + "" == "abc"
        ?: "" + "def" == "def"
        ?: "abc" + "def" == "abcdef"
    }

    \`*` {
    test:
        ?: "" * 0 == ""
        ?: "" * 1 == ""
        ?: "" * 2 == ""
        ?: "a" * 0 == ""
        ?: "a" * 1 == "a"
        ?: "a" * 2 == "aa"
        ?: "ab" * 0 == ""
        ?: "ab" * 1 == "ab"
        ?: "ab" * 2 == "abab"
    }

    \uppercase {
    test:
        txt := "Hello"
        ?: txt uppercase == "HELLO"
        ?: txt == "Hello"
        txt uppercase!
        ?: txt == "HELLO"
    }

    \lowercase {
    test:
        txt := "HELLO"
        ?: txt lowercase == "hello"
        ?: txt == "HELLO"
        txt lowercase!
        ?: txt == "hello"
    }

    \capitalize {
    test:
        txt := "hello"
        ?: txt capitalize == "Hello"
        ?: txt == "hello"
        txt capitalize!
        ?: txt == "Hello"
    }

    \extract_between {
    test:
        txt := "This is a beautiful world!"
        ?: txt extract_between("a ", " world") == "beautiful"
        ?: txt extract_between("", " world") == "This is a beautiful"
        ?: txt extract_between("a ", "") == "beautiful world!"
        ?: txt extract_between("", "") == txt
        ?: txt extract_between("a ", " world")
        !: txt extract_between("yop", "yap")
        ?: txt extract_between!("a ", " world") == "beautiful"
        ?: txt == "This is !"
    }

    \replace {
    test:
        txt := "This is a beautiful world!"
        ?: txt replace("beautiful", "wonderful") == "This is a wonderful world!"
        ?: txt == "This is a beautiful world!"
        ?: txt replace!("beautiful", "wonderful") == "This is a wonderful world!"
        ?: txt == "This is a wonderful world!"
    }
test:
    ?: origin == Object
    ?: parent == Object
    ?: is?(Comparable)
    ?: is?(Iterable)
    ?: is?(Collection)
    ?: is?(Indexable)
    ?: is?(Insertable)

    !: Text
    !: Text()
    ?: Text("")
    ?: ""

    ?: Text(true) == "yes"
    ?: Text(false) == "no"
    ?: Text(123) == "123"
    ?: Text(3.14) == "3.14"
    ?: Text('a') == "a"

    // interpolating...
    ?: "{}" == ""
    ?: "\{Hi there}" == "\{Hi there}"
    name := "manu"
    age := 38
    ?: "{name capitalize} is {age} years old" == "Manu is 38 years old"
}
